# Testing Code Best Practices

Testing code effectively is crucial for ensuring the reliability, scalability, and maintainability of your software applications. Here are industry best practices to follow when writing tests, illustrated with examples from Spring Java (REST-Assured) API testing and Selenium for UI testing.

## Use Descriptive Test Method Names

- Choose descriptive names that clearly explain the intent of each test method.
- This improves readability and helps others understand the purpose of the test without delving into the implementation.

### Example - Spring Java (REST-Assured)

```java
@Test
public void getUserDetails_ShouldReturnUserInformation() {
    // Test logic using REST-Assured to verify user details API
    given()
        .contentType(ContentType.JSON)
        .when()
        .get("/users/123")
        .then()
        .statusCode(200)
        .body("firstName", equalTo("John"))
        .body("lastName", equalTo("Doe"));
}

### Example- Selenium (UI Testing)
@Test
public void loginPage_ShouldDisplayLoginFields() {
    // Test logic using Selenium to verify login page UI elements
    WebElement usernameField = driver.findElement(By.id("username"));
    WebElement passwordField = driver.findElement(By.id("password"));
    
    assertTrue(usernameField.isDisplayed());
    assertTrue(passwordField.isDisplayed());
}

## Keep Tests Independent and Isolated
Ensure each test is independent of others to prevent cascading failures and ensure reliability.
Use setup (@Before) and teardown (@After) methods to initialize and clean up test data and resources.

## Example - Spring Java (REST-Assured)

@Before
public void setUp() {
    // Initialize REST-Assured base URI, authentication, etc.
    RestAssured.baseURI = "https://api.example.com";
    RestAssured.authentication = basic("username", "password");
}

@Test
public void addUser_ShouldReturnSuccess_WhenUserIsAdded() {
    // Test logic to add a user via REST API
    given()
        .contentType(ContentType.JSON)
        .body(new User("John", "Doe"))
        .when()
        .post("/users")
        .then()
        .statusCode(201);
}

@After
public void tearDown() {
    // Clean up resources after each test
}


Example - Selenium (UI Testing)

@Before
public void setUp() {
    // Initialize Selenium WebDriver, browser settings, etc.
    WebDriverManager.chromedriver().setup();
    driver = new ChromeDriver();
}

@Test
public void searchProduct_ShouldDisplaySearchResults() {
    // Test logic using Selenium to search for a product and verify search results
    driver.get("https://www.example.com");
    driver.findElement(By.id("searchInput")).sendKeys("Laptop");
    driver.findElement(By.id("searchButton")).click();
    
    assertTrue(driver.findElement(By.id("searchResults")).isDisplayed());
}

@After
public void tearDown() {
    // Quit WebDriver and clean up resources after each test
    if (driver != null) {
        driver.quit();
    }
}


## Use Mocks and Stubs for Dependencies
- Mock or stub external dependencies to isolate the behavior of the component under test.
- This ensures tests focus solely on the unit being tested and are not affected by external factors.

## Example - Spring Java (REST-Assured)

@Test
public void getProductDetails_ShouldReturnCorrectInformation() {
    // Mock the REST API response for product details
    RestAssuredMockMvc.given()
        .standaloneSetup(new ProductController())
        .when()
        .get("/products/123")
        .then()
        .statusCode(200)
        .body("name", equalTo("Laptop"))
        .body("price", equalTo(1000));
}

## Assert with Meaningful Messages
-Include descriptive messages in assertions to clarify the intent and expected outcome of each test.
- This helps quickly identify the cause of test failures and streamline debugging efforts.

## Example - Selenium (UI Testing)
@Test
public void checkoutProcess_ShouldCalculateTotalCorrectly() {
    // Test logic using Selenium to simulate checkout process and verify total amount
    double expectedTotal = 1000 * 0.9; // Assuming 10% discount
    
    // Perform checkout steps
    
    double actualTotal = Double.parseDouble(driver.findElement(By.id("totalAmount")).getText());
    
    assertEquals("Total amount does not match expected value", expectedTotal, actualTotal, 0.001);
}

## Keep Tests Simple and Focused
-Ensure each test focuses on testing a single behavior or scenario.
- This improves test clarity, maintainability, and makes it easier to identify the cause of failures.

## Example - Spring Java (REST-Assured)
@Test
public void deleteProduct_ShouldReturnSuccess_WhenProductIsDeleted() {
    // Test logic to delete a product via REST API
    given()
        .when()
        .delete("/products/123")
        .then()
        .statusCode(204);
}

## Example - Selenium (UI Testing)

@Test
public void validateProductPage_ShouldDisplayProductDetails() {
    // Test logic using Selenium to validate product details page UI
    WebElement productName = driver.findElement(By.id("productName"));
    WebElement productPrice = driver.findElement(By.id("productPrice"));
    
    assertTrue(productName.isDisplayed());
    assertTrue(productPrice.isDisplayed());
}

## Avoid Logic in Tests
-Keep test logic simple and avoid complex conditions, loops, or calculations within tests.
-If tests require intricate logic, consider refactoring to simplify or break down the functionality.

Effective testing practices enhance software quality and reliability. By following these best practices and leveraging tools like Spring Java (REST-Assured) for API testing and Selenium for UI testing,
you can build robust tests that validate application functionality and maintainability effectively.
